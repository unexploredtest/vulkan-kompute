name: Wheels

on: [push]

jobs: 
  wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          #- runs-on: ubuntu-latest
            #cibw-arch: manylinux_i686
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
          - runs-on: macos-latest
            cibw-arch: macosx_arm64
          - runs-on: macos-latest
            cibw-arch: macosx_universal2
          - runs-on: windows-latest
            cibw-arch: win_amd64
          #- runs-on: windows-latest
            #cibw-arch: win32
            #python-arch: x86

    name: Wheels â€¢ ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: ${{ matrix.python-arch }}

        # Inspired from https://github.com/humbletim/setup-vulkan-sdk
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.8

      - name: Install Vulkan Loader's Build Dependencies
        shell: bash
        run: |
          case `uname -s` in
            Linux)
              sudo apt-get install -y ninja-build libxrandr-dev
          esac
        
        # Inspired from https://github.com/humbletim/setup-vulkan-sdk
      - name: Install Vulkan SDK
        shell: bash
        run: |
          mkdir VULKAN_SDK
          mkdir VULKAN_SDK/_build
          cd VULKAN_SDK/_build
          git clone https://github.com/KhronosGroup/Vulkan-Headers.git --branch sdk-1.2.162
          cd Vulkan-Headers
          cmake -DCMAKE_INSTALL_PREFIX=../.. -DCMAKE_BUILD_TYPE=Release .
          cmake --build . --config Release
          cmake --install .
          cd ..
          git clone https://github.com/KhronosGroup/Vulkan-Loader.git --branch sdk-1.2.162
          cd Vulkan-Loader
          cmake -DVULKAN_HEADERS_INSTALL_DIR=../.. -DCMAKE_INSTALL_PREFIX=../.. -DCMAKE_BUILD_TYPE=Release . -DBUILD_WSI_WAYLAND_SUPPORT=OFF
          cmake --build . --config Release
          cmake --install .
          cd ../..
          rm -rf VULKAN_SDK/_build

      - name: Install requirements
        run: |
          python -m pip install cibuildwheel twine
      - name: Configure cibuildwheel
        shell: bash
        run: |
          CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
          echo "CIBW_ARCHS_MACOS=x86_64 arm64 universal2" >> $GITHUB_ENV
          echo "CIBW_MANYLINUX_X86_64_IMAGE=manylinux_2_24" >> $GITHUB_ENV
          echo "CIBW_MANYLINUX_I686_IMAGE=manylinux_2_24" >> $GITHUB_ENV
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_SKIP=cp27-* pp*" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT_COMMON" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_LINUX=$CIBW_ENVIRONMENT_COMMON" >> $GITHUB_ENV
          CIBW_BEFORE_ALL_COMMON="python3 --version && cmake -S . -B build_dependencies -DCMAKE_BUILD_TYPE=Release -DKOMPUTE_OPT_INSTALL=1 -DKOMPUTE_OPT_ENABLE_SPDLOG=0 -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DKOMPUTE_OPT_BUILD_PYTHON=1 -DKOMPUTE_OPT_REPO_SUBMODULE_BUILD=1 $CMAKE_ARCH && cmake --build build_dependencies -j 2"
          echo "CIBW_REPAIR_WHEEL_COMMAND_LINUX=""" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL=$CIBW_BEFORE_ALL_COMMON" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_LINUX=apt update && apt install python3-dev -y && pip install cmake && ln -fs \$(which cmake) /usr/local/bin/cmake && $CIBW_BEFORE_ALL_COMMON" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_WINDOWS=$CIBW_BEFORE_ALL_COMMON --config Release" >> $GITHUB_ENV
      
      - name: Run cibuildwheel
        run: |
          cibuildwheel
      
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl
